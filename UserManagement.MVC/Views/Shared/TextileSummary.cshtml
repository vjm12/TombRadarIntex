@using UserManagement.MVC.Models
@model BurialMainViewModel

<div class="table-responsive bg-light">
    <table id="myTable" class="table table-striped table-bordered">
        <thead class="table-primary">
        <th>Textile #: <input type="text" class="inp" data-col="0" placeholder="Search.."></th>
        <th>Textile Id: <input type="text" class="inp" data-col="1" placeholder="Search.."></th>
        <th>Description: <input type="text" class="inp" data-col="2" placeholder="Search.."></th>
        <th>Locale: <input type="text" class="inp" data-col="3" placeholder="Search.."></th>
        <th>Burial Number<input type="text" class="inp" data-col="4" placeholder="Search.."></th>
        <th>Estimated Period<input type="text" class="inp" data-col="5" placeholder="Search.."></th>
        <th>Direction<input type="text" class="inp" data-col="6" placeholder="Search.."></th>
        <th>Image Date<input type="text" class="inp" data-col="7" placeholder="Search.."></th>
        </thead>
        <tbody class="table-secondary table-hover">
            @foreach (Textile t in Model.textiles)
            {
            <tr>
                <td>@t.Textileid</td>
                <td>@t.Id</td>
                <td>@t.Description</td>
                <td>@t.Locale</td>
                <td>@t.Burialnumber</td>
                <td>@t.Estimatedperiod</td>
                <td>@t.Direction</td>
                <td>@t.Photographeddate</td>
            </tr>
            }
        </tbody>
    </table>
</div>

<script>
    const inputs = document.querySelectorAll('.inp');

    inputs.forEach(input => {
        input.addEventListener('keyup', () => {
            const searchValues = {};
            inputs.forEach(inp => {
                searchValues[inp.dataset.col] = inp.value.toUpperCase();
            });
            const rows = document.querySelectorAll('#myTable tbody tr');
            rows.forEach(row => {
                let match = true;
                row.querySelectorAll('td').forEach(cell => {
                    const colIndex = cell.cellIndex;
                    const text = cell.textContent.toUpperCase();
                    if (searchValues[colIndex] && !text.includes(searchValues[colIndex])) {
                        match = false;
                    }
                });
                row.style.display = match ? '' : 'none';
            });
        });
    });
</script>

