@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Npgsql.EntityFrameworkCore.PostgreSQL
@using UserManagement.MVC.Models
@using Radzen.Blazor
@using System.Linq

@*<h3>BurialSummary1</h3>
<RadzenDataGrid @ref="grid" @bind-Value=@selectedBurials KeyProperty="Burialid" IsLoading="@isLoading" Count="@count" Data="@burials" LoadData="@LoadData" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowSorting="true" AllowFiltering="true" AllowPaging="true" PageSize="4" PagerHorizontalAlign="HorizontalAlign.Center" TItem="Burialmain" ColumnWidth="200px">
    <Columns>
        <RadzenDataGridColumn TItem="Burialmain" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="50px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Burialmain" Property="Squarenorthsouth" Filterable="false" Title="Square North-South" Frozen="true" Width="150px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Burialmain" Property="Headdirection" Filterable="false" Title="Head Direction" Frozen="true" Width="150px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Burialmain" Property="Sex" Filterable="false" Title="Sex" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Burialmain" Property="Depth" Filterable="false" Title="Depth" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Burialmain" Property="Burialnumber" Filterable="false" Title="Burial Number" Frozen="true" Width="150px" TextAlign="TextAlign.Center" />
    </Columns>
</RadzenDataGrid>

@code {
    bool isLoading;
    int count;
    IEnumerable<Burialmain> myData;
    IList<Burialmain> selectedData;
    RadzenDataGrid<Burialmain> grid;

    List<string> sex = new List<string> { "M", "F" };
    IEnumerable<string> selectedBurials;

    async Task OnSelectedCategoriesChange(object value)
    {
        if (selectedBurials != null && !selectedBurials.Any())
        {
            selectedBurials = null;
        }

        await grid.FirstPage();
    }

    async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        var dbContext = new fagContext();
        var query = dbContext.Burialmains.AsQueryable();

        // Apply category filter
        if (selectedBurials != null && selectedBurials.Any())
        {
            query = query.Where(d => selectedBurials.Contains(d.Sex));
        }

        var result = await query
            .OrderBy(d => d.Id)
            .ToListAsync();

        // Update the Data property
        myData = result;
        // Update the count
        count = await query.CountAsync();

        isLoading = false;
    }

}*@
